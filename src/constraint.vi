
use std::ops::Cast;
use liana::term::Term;

pub enum ConstraintType {
  Le,
  Ge,
  Eq,
}

pub struct Constraint(pub (Term, ConstraintType, Term));

pub mod Constraint {
  pub fn .substitute_var(
    Constraint((lhs, constraint_type, rhs)),
    var_id: N32,
    substitute_with: Term,
  ) -> Constraint {
    Constraint((
      lhs.substitute_var(var_id, substitute_with),
      constraint_type,
      rhs.substitute_var(var_id, substitute_with),
    ))
  }

  pub impl toString: Cast[Constraint, String] {
    fn cast(Constraint((lhs, constraint_type, rhs))) -> String {
      match constraint_type {
        ConstraintType::Le { "{lhs} <= {rhs}" }
        ConstraintType::Ge { "{lhs} >= {rhs}" }
        ConstraintType::Eq { "{lhs} = {rhs}" }
      }
    }
  }
}
