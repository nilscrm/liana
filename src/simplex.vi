
use liana::constraint::Constraint;
use liana::term::Term;
use liana::variable::VarId;

use std::debug::Show;
use std::ops::Cast;

// Represents a linear programming problem in tableau form
pub.liana struct Tableau(pub {
  objective_row: List[F32],
  objective_constant: F32,
  matrix_rows: List[List[F32]],
  rhs: List[F32],
  num_vars: N32,
  basic_vars: List[VarId],
});

pub.liana mod Tableau {
  /// Find the entering variable index using the most negative coefficient rule
  fn .find_entering_var(&Tableau({
    objective_row,
    objective_constant,
    matrix_rows,
    rhs,
    num_vars,
    basic_vars,
  })) -> Option[N32] {
    let min_coef = 0.0;
    let entering_var = None;

    let objective_iter = objective_row.iter();
    let column_index = 0;
    while objective_iter.next() is Some(&obj_coef) {
      if obj_coef < min_coef {
        min_coef = obj_coef;
        entering_var = Some(column_index);
      }
      column_index += 1;
    }
    entering_var
  }

  /// Find the leaving variable index using the minimum ratio test
  fn .find_leaving_var(
    &Tableau({ objective_row, objective_constant, matrix_rows, rhs, num_vars, basic_vars }),
    entering_var: N32,
  ) -> Option[N32] {
    let row_iter = matrix_rows.iter();
    let rhs_iter = rhs.iter();

    let row_index = 0;
    let min_ratio = F32::inf;
    let leaving_row = None;

    while row_iter.next() is Some(&row) && rhs_iter.next() is Some(&rhs_val) {
      let coef = row.get(entering_var).unwrap();
      if coef > 0.0 && (rhs_val / coef) < min_ratio {
        min_ratio = rhs_val / coef;
        leaving_row = Some(row_index);
      }
      row_index += 1;
    }
    leaving_row
  }

  /// Perform a pivot operation
  fn .pivot(
    &Tableau({ objective_row, objective_constant, matrix_rows, rhs, num_vars, basic_vars }),
    leaving_row_index: N32,
    entering_var: N32,
  ) {
    let &leaving_row = matrix_rows.at(leaving_row_index).unwrap();
    let &leaving_row_rhs = rhs.at(leaving_row_index).unwrap();

    let pivot_element = leaving_row.get(entering_var).unwrap();

    let leaving_row_iter = leaving_row.iter();
    while leaving_row_iter.next() is Some(&val) {
      val /= pivot_element;
    }
    leaving_row_rhs /= pivot_element;

    let row_iter = matrix_rows.iter();
    let rhs_iter = rhs.iter();
    let row_index = 0;
    while row_iter.next() is Some(&row) && rhs_iter.next() is Some(&rhs_val) {
      if row_index != leaving_row_index {
        let scaling_factor = row.get(entering_var).unwrap();
        let row_iter = row.iter();
        let leaving_row_iter = leaving_row.iter();
        while row_iter.next() is Some(&val) {
          let &leaving_val = leaving_row_iter.next().unwrap();
          val -= scaling_factor * leaving_val;
        }
        rhs_val -= scaling_factor * leaving_row_rhs;
      }
      row_index += 1;
    }
    let scaling_factor = objective_row.get(entering_var).unwrap();
    let objective_iter = objective_row.iter();
    let leaving_row_iter = leaving_row.iter();
    while objective_iter.next() is Some(&val) {
      let &leaving_val = leaving_row_iter.next().unwrap();
      val -= scaling_factor * leaving_val;
    }
    objective_constant -= scaling_factor * leaving_row_rhs;

    let &basic_var_leaving = basic_vars.at(leaving_row_index).unwrap();
    basic_var_leaving = entering_var;
  }

  pub enum OptimizationResult {
    Unbounded,
    Solution({ value: F32, var_values: List[F32] }),
  }

  /// Run the simplex method to solve the linear program
  pub fn .solve(&self: &Tableau) -> OptimizationResult {
    loop {
      let entering_var = match self.find_entering_var() {
        Some(var) { var }
        None { break () }
      };

      let leaving_var = match self.find_leaving_var(entering_var) {
        Some(var) { var }
        None { return OptimizationResult::Unbounded }
      };

      self.pivot(leaving_var, entering_var);
    }

    self.extract_solution()
  }

  fn .extract_solution(&Tableau({
    objective_row,
    objective_constant,
    matrix_rows,
    rhs,
    num_vars,
    basic_vars,
  })) -> OptimizationResult {
    let rhs_iter = rhs.iter();
    let solution = List::new(num_vars, 0.0);
    let basic_vars_iter = basic_vars.iter();
    while basic_vars_iter.next() is Some(&basic_var) && rhs_iter.next() is Some(&val) {
      if basic_var < num_vars && solution.at(basic_var) is Some(&sol_place) {
        sol_place = val;
      }
    }

    OptimizationResult::Solution({ value: objective_constant, var_values: solution })
  }

  pub impl show: Show[Tableau] {
    fn show(&Tableau({ objective_row, objective_constant, matrix_rows, rhs, num_vars, basic_vars })) -> Show {
      Show::Object([
        (Show::Literal("objective_row"), objective_row.show()),
        (Show::Literal("objective_constant"), objective_constant.show()),
        (Show::Literal("matrix_rows"), matrix_rows.show()),
        (Show::Literal("rhs"), rhs.show()),
        (Show::Literal("num_vars"), num_vars.show()),
        (Show::Literal("basic_vars"), basic_vars.show()),
      ])
    }
  }
}
