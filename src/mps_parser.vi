
use liana::mps::{
  BoundEntry,
  BoundType,
  ColumnEntry,
  MpsData,
  ObjectiveSense,
  RangeEntry,
  RhsEntry,
  RowDefinition,
  RowType,
};

enum MpsSection {
  Start,
  Name,
  Objsense,
  Rows,
  Columns,
  Rhs,
  Ranges,
  Bounds,
}

pub mod MpsParser {
  pub fn parse(&io: &IO) -> Result[MpsData, String] {
    let MpsData({
      problem_name,
      objective_sense,
      rows,
      columns,
      rhs_entries,
      range_entries,
      bound_entries,
    }) = MpsData::new();

    let current_section = MpsSection::Start;
    let line_number = 0;

    while io.read_line() is Some(line) {
      line_number += 1;
      // Skip comments
      if line.starts_with(&("*"; _)) {
        continue;
      }

      if line.starts_with(&("NAME"; _)) {
        problem_name = parse_name_line(line)?;
        current_section = MpsSection::Name;
      } else if line.starts_with(&("OBJSENSE"; _)) {
        current_section = MpsSection::Objsense;
      } else if line.starts_with(&("ROWS"; _)) {
        current_section = MpsSection::Rows;
      } else if line.starts_with(&("COLUMNS"; _)) {
        current_section = MpsSection::Columns;
      } else if line.starts_with(&("RHS"; _)) {
        current_section = MpsSection::Rhs;
      } else if line.starts_with(&("RANGES"; _)) {
        current_section = MpsSection::Ranges;
      } else if line.starts_with(&("BOUNDS"; _)) {
        current_section = MpsSection::Bounds;
      } else if line.starts_with(&("ENDATA"; _)) {
        return Ok(MpsData({
          problem_name,
          objective_sense,
          rows,
          columns,
          rhs_entries,
          range_entries,
          bound_entries,
        }))
      } else {
        match current_section {
          MpsSection::Start {
            return Err("Expected NAME section but got '{line}'");
          }
          MpsSection::Name {
            return Err("Expected new section after the name section but got '{line}'");
          }
          MpsSection::Objsense {
            objective_sense = parse_objsense_line(line)?;
          }
          MpsSection::Rows {
            rows.push_back(parse_row_line(line, line_number)?);
          }
          MpsSection::Columns {
            columns ++= parse_column_line(line, line_number)?;
          }
          MpsSection::Rhs {
            rhs_entries ++= parse_rhs_line(line, line_number)?;
          }
          MpsSection::Ranges {
            range_entries ++= parse_ranges_line(line, line_number)?;
          }
          MpsSection::Bounds {
            bound_entries.push_back(parse_bounds_line(line, line_number)?);
          }
        }
      }
    }

    Err("Expected ENDATA line but got EOF")
  }

  fn split_fields(line: String) -> (String, String, String, String, String, String) {
    // Fields start at columns 2, 5, 15, 25, 40 and 50
    line!.pop_front();
    let (field1, line) = line.split_at(3);
    let (field2, line) = line.split_at(10);
    let (field3, line) = line.split_at(10);
    let (field4, line) = line.split_at(15);
    let (field5, line) = line.split_at(10);
    let (field6, _) = line.split_at(15);
    (field1.trim(), field2.trim(), field3.trim(), field4.trim(), field5.trim(), field6.trim())
  }

  fn parse_float_line(line: String, needs_name: Bool) -> Result[
    (String, List[(String, F32)]),
    String,
  ] {
    let (_, row, column1, value1, column2, value2) = split_fields(line);
    if needs_name && row.len() == 0 {
      return Err("Missing row name in float line '{line}'")
    };
    if column1.len() == 0 {
      return Err("Expected at least one column in float line '{line}'")
    };
    let Some(value1) = F32::parse(value1) else {
      return Err("Cannot parse first float value \"{value1}\" in float line '{line}'")
    };
    let items = [(column1, value1)];
    if column2.len() != 0 {
      let Some(value2) = F32::parse(value2) else {
        return Err("Cannot parse second float value \"{value2}\" in float line '{line}'")
      };
      items.push_back((column2, value2));
    }
    Ok((row, items))
  }

  fn parse_name_line(line: String) -> Result[String, String] {
    let (_, _, name, _, _, _) = split_fields(line);
    if name.len() == 0 {
      return Err("Missing name in line '{line}'")
    };
    Ok(name)
  }

  fn parse_objsense_line(line: String) -> Result[ObjectiveSense, String] {
    line = line.trim();
    if line == "MIN" {
      Ok(ObjectiveSense::Minimize)
    } else if line == "MAX" {
      Ok(ObjectiveSense::Maximize)
    } else {
      Err("Invalid objective sense: expected 'MIN' or 'MAX'")
    }
  }

  fn parse_row_line(line: String, line_number: N32) -> Result[RowDefinition, String] {
    let (constraint, row_name, _, _, _, _) = split_fields(line);
    let row_type = if constraint == "N" {
      RowType::NonConstraining
    } else if constraint == "E" {
      RowType::Equal
    } else if constraint == "L" {
      RowType::LessEqual
    } else if constraint == "G" {
      RowType::GreaterEqual
    } else {
      return Err("Invalid row line: expected constraint (N, E, L, G) but got '{constraint}' in line {
        line_number
      }")
    };
    if row_name.len() == 0 {
      return Err("Invalid empty row name in line {line_number}")
    };
    Ok(RowDefinition({ row_type, name: row_name }))
  }

  fn parse_column_line(line: String, line_number: N32) -> Result[List[ColumnEntry], String] {
    let (_, var_name, row_name1, value1, row_name2, value2) = split_fields(line);
    if var_name.len() == 0 {
      return Err("Missing variable name in column line {line_number}")
    };
    if row_name1.len() == 0 {
      return Err("Expected at least one column in line {line_number}")
    };
    let Some(value1) = F32::parse(value1) else {
      return Err("Cannot parse first float value \"{value1}\" in line {line_number}")
    };
    let items = [ColumnEntry({ var_name, row_name: row_name1, value: value1 })];
    if row_name2.len() != 0 {
      let Some(value2) = F32::parse(value2) else {
        return Err("Cannot parse second float value \"{value2}\" in line {line_number}")
      };
      items.push_back(ColumnEntry({ var_name, row_name: row_name2, value: value2 }));
    }
    Ok(items)
  }

  fn parse_rhs_line(line: String, line_number: N32) -> Result[List[RhsEntry], String] {
    let (_, rhs_name, row_name1, value1, row_name2, value2) = split_fields(line);
    if row_name1.len() == 0 {
      return Err("Expected at least one column in line {line_number}")
    };
    let Some(value1) = F32::parse(value1) else {
      return Err("Cannot parse first float value \"{value1}\" in line {line_number}")
    };
    let items = [RhsEntry({ rhs_name, row_name: row_name1, value: value1 })];
    if row_name2.len() != 0 {
      let Some(value2) = F32::parse(value2) else {
        return Err("Cannot parse second float value \"{value2}\" in line {line_number}")
      };
      items.push_back(RhsEntry({ rhs_name, row_name: row_name2, value: value2 }));
    }
    Ok(items)
  }

  fn parse_ranges_line(line: String, line_number: N32) -> Result[List[RangeEntry], String] {
    let (_, range_name, row_name1, value1, row_name2, value2) = split_fields(line);
    if range_name.len() == 0 {
      return Err("Missing range name in range line {line_number}")
    };
    if row_name1.len() == 0 {
      return Err("Expected at least one column in range line {line_number} but got '{line}'")
    };
    let Some(value1) = F32::parse(value1) else {
      return Err("Cannot parse first float value \"{value1}\" in range line {line_number}")
    };
    let items = [RangeEntry({ range_name, row_name: row_name1, value: value1 })];
    if row_name2.len() != 0 {
      let Some(value2) = F32::parse(value2) else {
        return Err("Cannot parse second float value \"{value2}\" in range line {line_number}")
      };
      items.push_back(RangeEntry({ range_name, row_name: row_name2, value: value2 }));
    }
    Ok(items)
  }

  fn parse_bounds_line(line: String, line_number: N32) -> Result[BoundEntry, String] {
    let (bound_type, name, variable, value, _, _) = split_fields(line);
    let bound_type = if bound_type == "LO" {
      BoundType::Lower
    } else if bound_type == "UP" {
      BoundType::Upper
    } else if bound_type == "FX" {
      BoundType::Fixed
    } else if bound_type == "FR" {
      BoundType::Free
    } else if bound_type == "MI" {
      BoundType::MinusInfinity
    } else if bound_type == "PL" {
      BoundType::PlusInfinity
    } else {
      return Err("Invalid bound type: expected (LO, UP, FX, FR, MI, PL) but got '{bound_type}' in line {
        line_number
      }")
    };
    if variable.len() == 0 {
      return Err("Missing variable name in bounds line {line_number}")
    };
    let value = if bound_type is BoundType::Lower || bound_type is BoundType::Upper || bound_type is BoundType::Fixed {
      let value = F32::parse(value) else {
        return Err("Cannot parse float value \"{value}\" in bound line {line_number}")
      };
      value
    } else {
      if value.len() != 0 {
        return Err("Expected empty value for bound type {bound_type.show()} in line {line_number}")
      };
      None
    };

    Ok(BoundEntry({ bound_name: name, bound_type, var_name: variable, value }))
  }
}
