use liana::simplex::Tableau;
use liana::terms::{Term, Var};
use liana::constraint::Constraint;

use std::unicode::ToString;
use std::data::Map;
use std::ops::arithmetic::{Add, Sub, Mul};
use std::ops::Cast;

pub struct LinearProgram {
  vars: List[Var],
  objective: Term,
  constraints: List[Constraint],
}

pub mod LinearProgram {
  pub fn new() -> LinearProgram {
    LinearProgram({
      vars: [],
      objective: 0 as Term,
      constraints: [],
    })
  }

  /// Adds a new variable with lower bound 0
  pub fn .new_var(&LinearProgram({vars, objective, constraints}), name: String) -> Var {
    let var = Var({id: vars.len(), name});
    vars.push_back(var);
    var
  }

  pub fn .add_constraint(&LinearProgram({vars, objective, constraints}), constraint: Constraint) {
    constraints.push_back(constraint);
  }

  pub fn .set_objective(&LinearProgram({vars, objective, constraints}), new_objective: Term) {
    objective = new_objective;
  }

  pub fn .solve(&LinearProgram({vars, objective, constraints})) -> Result[(F32, List[F32]), String] {
    let tableau = Tableau::new(vars.len(), constraints, objective);
    tableau.solve()
  }

  pub impl toString: ToString[LinearProgram] {
    fn .to_string(LinearProgram({vars, objective, constraints})) -> String {
      let constraint_str = constraints.map(ToString::to_string[Constraint]).join("\n");
      let var_str = vars.map(ToString::to_string[Var]).join(", ");
      "Maximize {objective}\nSubject to:\n{constraint_str}\n{var_str} >= 0"
    }
  }
}
